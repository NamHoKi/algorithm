import Foundation

/*
 ✏️ 4673 셀프 넘버
 셀프 넘버는 1949년 인도 수학자 D.R. Kaprekar가 이름 붙였다. 양의 정수 n에 대해서 d(n)을 n과 n의 각 자리수를 더하는 함수라고 정의하자. 예를 들어, d(75) = 75+7+5 = 87이다.
 양의 정수 n이 주어졌을 때, 이 수를 시작해서 n, d(n), d(d(n)), d(d(d(n))), ...과 같은 무한 수열을 만들 수 있다.
 예를 들어, 33으로 시작한다면 다음 수는 33 + 3 + 3 = 39이고, 그 다음 수는 39 + 3 + 9 = 51, 다음 수는 51 + 5 + 1 = 57이다. 이런식으로 다음과 같은 수열을 만들 수 있다.
 33, 39, 51, 57, 69, 84, 96, 111, 114, 120, 123, 129, 141, ...
 n을 d(n)의 생성자라고 한다. 위의 수열에서 33은 39의 생성자이고, 39는 51의 생성자, 51은 57의 생성자이다. 생성자가 한 개보다 많은 경우도 있다. 예를 들어, 101은 생성자가 2개(91과 100) 있다.
 생성자가 없는 숫자를 셀프 넘버라고 한다. 100보다 작은 셀프 넘버는 총 13개가 있다. 1, 3, 5, 7, 9, 20, 31, 42, 53, 64, 75, 86, 97
 10000보다 작거나 같은 셀프 넘버를 한 줄에 하나씩 출력하는 프로그램을 작성하시오.
 
 입력: 입력은 없다.
 
 출력: 10,000보다 작거나 같은 셀프 넘버를 한 줄에 하나씩 증가하는 순서로 출력한다.
 */

/// 1에서 시작: 1 -> 2 -> 4 -> 8 -> 16 -> 23 -> 28 -> 38 -> 49 -> 62 -> 70 -> 77 -> 91 -> 101 -> 103 -> 107 -> 115 -> 122 -> 127 -> 137 -> 148 ->. 161 -> 169 ->. 185-> 199
///.                     1       2.     4.     8.       7.       5.     10.     11.      13.    8    7.      14.        10.      2         4.       8         7.        5.         10.         11.      13.     8.         16      14
/// 3에서 시작: 3 -> 6 -> 12 -> 15 -> 21 -> 24 -> 30 -> 33 -> 39 -> 51 -> 57 -> 69 -> 84 -> 96 -> 111 -> 114 -> 120 -> 123 -> 129 -> 141 -> 147 -> 159 -> 174
///          3      6        3       6        3      6       3         6         12       6       12     15      12    15      3         6            3         6        12      6           12        15
/// 5에서 시작: 5 -> 10 -> 11 -> 13 -> 17 -> 25 -> 32 -> 37 -> 47 -> 58 -> 71 -> 79 -> 95 -> 109
///          5         1       2        4        8       7        5       10      11      13      8      16     14
/// 7에서 시작: 7 -> 14 -> 19 -> 29 -> 40 -> 44 -> 52 -> 59 -> 73 -> 83 -> 94 -> 107 -> 115
///           7       5       10       11   4      8          7       14      10      11     13       8
/// 9에서 시작: 9 -> 18 -> 27 -> 36 -> 45 -> 54
///          9      9        9        9        9
/// 20에서 시작: 20 -> 22 -> 26 -> 34 -> 41 -> 46 -> 56 -> 67 -> 80 -> 88 -> 104 -> 109 -> 119
///            2      4        8         7        5       10       11     13     8        16       5         10
/// 31에서 시작: 31 -> 35 -> 43 -> 50 ->  55 -> 65 -> 76 -> 89 -> 106 -> 113 -> 118 -> 128 -> 139
///            4        8        7        5       10       11      13     17        7         5         10       11

// 9에서부터 11을 더해 계속 출력
// 단, 9의 배수를 만나면 베이스 넘버를 현재 수 -9로 교체하고 프린트, 다시 거기서부터 11을 더한다.

//for i in 1...9 {
//    if !i.isMultiple(of: 2) { print(i) }
//}
//
//var numberNow = 9
//
//while numberNow <= 10000 {
//    numberNow += 11
//    if numberNow % 9 != 0 {
//        print(numberNow)
//    } else {
//        numberNow -= 9
//        print(numberNow)
//    }
//}
//이건 아니래^^ 응 규칙 없어~

//노가다 풀이
var s: Set<Int> = []
for i in 1...10000 {
    var n = i
    if !s.contains(n) {
        while n <= 10000 {
            let d = n/1000
            let c = (n-d*1000)/100
            let b = (n-d*1000-c*100)/10
            let a = n-d*1000-c*100-b*10
            n = n + d + c + b + a
            s.insert(n)
        }
    }
}
for j in 1...10000 {
    if !s.contains(j) { print(j) }
}
